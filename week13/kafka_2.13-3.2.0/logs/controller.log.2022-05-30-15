[2022-05-30 15:19:03,235] INFO [ControllerEventThread controllerId=1003] Shutting down (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-30 15:19:03,238] INFO [ControllerEventThread controllerId=1003] Shutdown completed (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-30 15:19:03,238] INFO [ControllerEventThread controllerId=1003] Stopped (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-30 15:19:03,240] DEBUG [Controller id=1003] Resigning (kafka.controller.KafkaController)
[2022-05-30 15:19:03,241] DEBUG [Controller id=1003] Unregister BrokerModifications handler for Set() (kafka.controller.KafkaController)
[2022-05-30 15:19:03,242] INFO [PartitionStateMachine controllerId=1003] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2022-05-30 15:19:03,242] INFO [ReplicaStateMachine controllerId=1003] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2022-05-30 15:19:03,243] INFO [Controller id=1003] Resigned (kafka.controller.KafkaController)
[2022-05-30 15:24:45,227] INFO [ControllerEventThread controllerId=1] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-30 15:24:45,257] INFO [Controller id=1] 1 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)
[2022-05-30 15:24:45,262] INFO [Controller id=1] Creating FeatureZNode at path: /feature with contents: FeatureZNode(Enabled,Features{}) (kafka.controller.KafkaController)
[2022-05-30 15:24:45,319] INFO [Controller id=1] Registering handlers (kafka.controller.KafkaController)
[2022-05-30 15:24:45,332] INFO [Controller id=1] Deleting log dir event notifications (kafka.controller.KafkaController)
[2022-05-30 15:24:45,338] INFO [Controller id=1] Deleting isr change notifications (kafka.controller.KafkaController)
[2022-05-30 15:24:45,342] INFO [Controller id=1] Initializing controller context (kafka.controller.KafkaController)
[2022-05-30 15:24:45,363] INFO [Controller id=1] Initialized broker epochs cache: HashMap(1 -> 745) (kafka.controller.KafkaController)
[2022-05-30 15:24:45,368] DEBUG [Controller id=1] Register BrokerModifications handler for Set(1) (kafka.controller.KafkaController)
[2022-05-30 15:24:45,374] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2022-05-30 15:24:45,382] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2022-05-30 15:24:45,384] INFO [Controller id=1] Currently active brokers in the cluster: Set(1) (kafka.controller.KafkaController)
[2022-05-30 15:24:45,384] INFO [Controller id=1] Currently shutting brokers in the cluster: HashSet() (kafka.controller.KafkaController)
[2022-05-30 15:24:45,384] INFO [Controller id=1] Current list of topics in the cluster: HashSet() (kafka.controller.KafkaController)
[2022-05-30 15:24:45,384] INFO [Controller id=1] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2022-05-30 15:24:45,387] INFO [Controller id=1] List of topics to be deleted:  (kafka.controller.KafkaController)
[2022-05-30 15:24:45,387] INFO [Controller id=1] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2022-05-30 15:24:45,387] INFO [Controller id=1] Initializing topic deletion manager (kafka.controller.KafkaController)
[2022-05-30 15:24:45,388] INFO [Topic Deletion Manager 1] Initializing manager with initial deletions: Set(), initial ineligible deletions: HashSet() (kafka.controller.TopicDeletionManager)
[2022-05-30 15:24:45,390] INFO [Controller id=1] Sending update metadata request (kafka.controller.KafkaController)
[2022-05-30 15:24:45,404] INFO [ReplicaStateMachine controllerId=1] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2022-05-30 15:24:45,405] INFO [ReplicaStateMachine controllerId=1] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2022-05-30 15:24:45,414] INFO [ReplicaStateMachine controllerId=1] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2022-05-30 15:24:45,415] DEBUG [ReplicaStateMachine controllerId=1] Started replica state machine with initial state -> HashMap() (kafka.controller.ZkReplicaStateMachine)
[2022-05-30 15:24:45,415] INFO [PartitionStateMachine controllerId=1] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2022-05-30 15:24:45,416] INFO [PartitionStateMachine controllerId=1] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2022-05-30 15:24:45,416] INFO [RequestSendThread controllerId=1] Controller 1 connected to localhost:9001 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2022-05-30 15:24:45,421] DEBUG [PartitionStateMachine controllerId=1] Started partition state machine with initial state -> HashMap() (kafka.controller.ZkPartitionStateMachine)
[2022-05-30 15:24:45,422] INFO [Controller id=1] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)
[2022-05-30 15:24:45,431] INFO [Controller id=1] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2022-05-30 15:24:45,432] INFO [Controller id=1] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2022-05-30 15:24:45,432] INFO [Controller id=1] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2022-05-30 15:24:45,433] INFO [Controller id=1] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2022-05-30 15:24:45,435] INFO [Controller id=1] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2022-05-30 15:24:45,459] INFO [Controller id=1] Starting the controller scheduler (kafka.controller.KafkaController)
[2022-05-30 15:24:50,464] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2022-05-30 15:24:50,465] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2022-05-30 15:25:05,045] INFO [Controller id=1] Newly added brokers: 1001, deleted brokers: , bounced brokers: , all live brokers: 1,1001 (kafka.controller.KafkaController)
[2022-05-30 15:25:05,046] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 1001 (kafka.controller.ControllerChannelManager)
[2022-05-30 15:25:05,050] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2022-05-30 15:25:05,052] INFO [Controller id=1] New broker startup callback for 1001 (kafka.controller.KafkaController)
[2022-05-30 15:25:05,057] INFO [RequestSendThread controllerId=1] Controller 1 connected to localhost:9002 (id: 1001 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2022-05-30 15:25:05,059] DEBUG [Controller id=1] Register BrokerModifications handler for List(1001) (kafka.controller.KafkaController)
[2022-05-30 15:25:05,061] INFO [Controller id=1] Updated broker epochs cache: HashMap(1 -> 745, 1001 -> 766) (kafka.controller.KafkaController)
[2022-05-30 15:25:05,108] INFO [ControllerEventThread controllerId=1001] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-30 15:25:05,122] DEBUG [Controller id=1001] Broker 1 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2022-05-30 15:25:13,125] INFO [Controller id=1] Newly added brokers: 1002, deleted brokers: , bounced brokers: , all live brokers: 1,1001,1002 (kafka.controller.KafkaController)
[2022-05-30 15:25:13,126] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 1002 (kafka.controller.ControllerChannelManager)
[2022-05-30 15:25:13,129] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2022-05-30 15:25:13,129] INFO [Controller id=1] New broker startup callback for 1002 (kafka.controller.KafkaController)
[2022-05-30 15:25:13,131] DEBUG [Controller id=1] Register BrokerModifications handler for List(1002) (kafka.controller.KafkaController)
[2022-05-30 15:25:13,133] INFO [Controller id=1] Updated broker epochs cache: HashMap(1 -> 745, 1001 -> 766, 1002 -> 783) (kafka.controller.KafkaController)
[2022-05-30 15:25:13,133] INFO [RequestSendThread controllerId=1] Controller 1 connected to localhost:9003 (id: 1002 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2022-05-30 15:25:13,199] INFO [ControllerEventThread controllerId=1002] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-30 15:25:13,217] DEBUG [Controller id=1002] Broker 1 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2022-05-30 15:26:18,490] INFO [Controller id=1001] 1001 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)
[2022-05-30 15:26:18,492] INFO [Controller id=1001] Registering handlers (kafka.controller.KafkaController)
[2022-05-30 15:26:18,496] INFO [Controller id=1001] Deleting log dir event notifications (kafka.controller.KafkaController)
[2022-05-30 15:26:18,504] INFO [Controller id=1001] Deleting isr change notifications (kafka.controller.KafkaController)
[2022-05-30 15:26:18,508] INFO [Controller id=1001] Initializing controller context (kafka.controller.KafkaController)
[2022-05-30 15:26:18,514] INFO [Controller id=1001] Initialized broker epochs cache: HashMap() (kafka.controller.KafkaController)
[2022-05-30 15:26:18,521] DEBUG [Controller id=1001] Register BrokerModifications handler for Set() (kafka.controller.KafkaController)
[2022-05-30 15:26:18,530] INFO [Controller id=1001] Currently active brokers in the cluster: Set() (kafka.controller.KafkaController)
[2022-05-30 15:26:18,530] INFO [Controller id=1001] Currently shutting brokers in the cluster: HashSet() (kafka.controller.KafkaController)
[2022-05-30 15:26:18,533] INFO [Controller id=1001] Current list of topics in the cluster: HashSet() (kafka.controller.KafkaController)
[2022-05-30 15:26:18,535] INFO [Controller id=1001] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2022-05-30 15:26:18,538] INFO [Controller id=1001] List of topics to be deleted:  (kafka.controller.KafkaController)
[2022-05-30 15:26:18,539] INFO [Controller id=1001] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2022-05-30 15:26:18,539] INFO [Controller id=1001] Initializing topic deletion manager (kafka.controller.KafkaController)
[2022-05-30 15:26:18,540] INFO [Topic Deletion Manager 1001] Initializing manager with initial deletions: Set(), initial ineligible deletions: HashSet() (kafka.controller.TopicDeletionManager)
[2022-05-30 15:26:18,542] INFO [Controller id=1001] Sending update metadata request (kafka.controller.KafkaController)
[2022-05-30 15:26:18,554] INFO [ReplicaStateMachine controllerId=1001] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2022-05-30 15:26:18,555] INFO [ReplicaStateMachine controllerId=1001] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2022-05-30 15:26:18,561] INFO [ReplicaStateMachine controllerId=1001] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2022-05-30 15:26:18,562] DEBUG [ReplicaStateMachine controllerId=1001] Started replica state machine with initial state -> HashMap() (kafka.controller.ZkReplicaStateMachine)
[2022-05-30 15:26:18,563] INFO [PartitionStateMachine controllerId=1001] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2022-05-30 15:26:18,564] INFO [PartitionStateMachine controllerId=1001] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2022-05-30 15:26:18,570] DEBUG [PartitionStateMachine controllerId=1001] Started partition state machine with initial state -> HashMap() (kafka.controller.ZkPartitionStateMachine)
[2022-05-30 15:26:18,571] INFO [Controller id=1001] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)
[2022-05-30 15:26:18,584] INFO [Controller id=1001] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2022-05-30 15:26:18,585] INFO [Controller id=1001] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2022-05-30 15:26:18,587] INFO [Controller id=1001] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2022-05-30 15:26:18,588] INFO [Controller id=1001] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2022-05-30 15:26:18,591] INFO [Controller id=1001] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2022-05-30 15:26:18,611] INFO [Controller id=1001] Starting the controller scheduler (kafka.controller.KafkaController)
[2022-05-30 15:26:59,876] INFO [ControllerEventThread controllerId=1] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-30 15:26:59,906] INFO [Controller id=1] 1 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)
[2022-05-30 15:26:59,911] INFO [Controller id=1] Creating FeatureZNode at path: /feature with contents: FeatureZNode(Enabled,Features{}) (kafka.controller.KafkaController)
[2022-05-30 15:26:59,964] INFO [Controller id=1] Registering handlers (kafka.controller.KafkaController)
[2022-05-30 15:26:59,968] INFO [Controller id=1] Deleting log dir event notifications (kafka.controller.KafkaController)
[2022-05-30 15:26:59,971] INFO [Controller id=1] Deleting isr change notifications (kafka.controller.KafkaController)
[2022-05-30 15:26:59,973] INFO [Controller id=1] Initializing controller context (kafka.controller.KafkaController)
[2022-05-30 15:26:59,986] INFO [Controller id=1] Initialized broker epochs cache: HashMap(1 -> 867) (kafka.controller.KafkaController)
[2022-05-30 15:26:59,991] DEBUG [Controller id=1] Register BrokerModifications handler for Set(1) (kafka.controller.KafkaController)
[2022-05-30 15:26:59,996] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2022-05-30 15:27:00,003] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2022-05-30 15:27:00,005] INFO [Controller id=1] Currently active brokers in the cluster: Set(1) (kafka.controller.KafkaController)
[2022-05-30 15:27:00,006] INFO [Controller id=1] Currently shutting brokers in the cluster: HashSet() (kafka.controller.KafkaController)
[2022-05-30 15:27:00,006] INFO [Controller id=1] Current list of topics in the cluster: HashSet() (kafka.controller.KafkaController)
[2022-05-30 15:27:00,007] INFO [Controller id=1] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2022-05-30 15:27:00,010] INFO [Controller id=1] List of topics to be deleted:  (kafka.controller.KafkaController)
[2022-05-30 15:27:00,010] INFO [Controller id=1] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2022-05-30 15:27:00,011] INFO [Controller id=1] Initializing topic deletion manager (kafka.controller.KafkaController)
[2022-05-30 15:27:00,011] INFO [Topic Deletion Manager 1] Initializing manager with initial deletions: Set(), initial ineligible deletions: HashSet() (kafka.controller.TopicDeletionManager)
[2022-05-30 15:27:00,012] INFO [Controller id=1] Sending update metadata request (kafka.controller.KafkaController)
[2022-05-30 15:27:00,029] INFO [ReplicaStateMachine controllerId=1] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2022-05-30 15:27:00,030] INFO [ReplicaStateMachine controllerId=1] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2022-05-30 15:27:00,036] INFO [ReplicaStateMachine controllerId=1] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2022-05-30 15:27:00,037] DEBUG [ReplicaStateMachine controllerId=1] Started replica state machine with initial state -> HashMap() (kafka.controller.ZkReplicaStateMachine)
[2022-05-30 15:27:00,038] INFO [PartitionStateMachine controllerId=1] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2022-05-30 15:27:00,039] INFO [PartitionStateMachine controllerId=1] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2022-05-30 15:27:00,039] INFO [RequestSendThread controllerId=1] Controller 1 connected to localhost:9001 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2022-05-30 15:27:00,043] DEBUG [PartitionStateMachine controllerId=1] Started partition state machine with initial state -> HashMap() (kafka.controller.ZkPartitionStateMachine)
[2022-05-30 15:27:00,044] INFO [Controller id=1] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)
[2022-05-30 15:27:00,054] INFO [Controller id=1] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2022-05-30 15:27:00,055] INFO [Controller id=1] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2022-05-30 15:27:00,055] INFO [Controller id=1] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2022-05-30 15:27:00,056] INFO [Controller id=1] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2022-05-30 15:27:00,057] INFO [Controller id=1] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2022-05-30 15:27:00,071] INFO [Controller id=1] Starting the controller scheduler (kafka.controller.KafkaController)
[2022-05-30 15:27:04,589] INFO [Controller id=1] Newly added brokers: 2, deleted brokers: , bounced brokers: , all live brokers: 1,2 (kafka.controller.KafkaController)
[2022-05-30 15:27:04,589] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2022-05-30 15:27:04,592] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2022-05-30 15:27:04,594] INFO [Controller id=1] New broker startup callback for 2 (kafka.controller.KafkaController)
[2022-05-30 15:27:04,597] INFO [RequestSendThread controllerId=1] Controller 1 connected to localhost:9002 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2022-05-30 15:27:04,599] DEBUG [Controller id=1] Register BrokerModifications handler for List(2) (kafka.controller.KafkaController)
[2022-05-30 15:27:04,602] INFO [Controller id=1] Updated broker epochs cache: HashMap(1 -> 867, 2 -> 887) (kafka.controller.KafkaController)
[2022-05-30 15:27:04,654] INFO [ControllerEventThread controllerId=2] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-30 15:27:04,671] DEBUG [Controller id=2] Broker 1 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2022-05-30 15:27:05,077] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2022-05-30 15:27:05,077] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2022-05-30 15:27:07,756] INFO [Controller id=1] Newly added brokers: 3, deleted brokers: , bounced brokers: , all live brokers: 1,2,3 (kafka.controller.KafkaController)
[2022-05-30 15:27:07,756] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 3 (kafka.controller.ControllerChannelManager)
[2022-05-30 15:27:07,760] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2022-05-30 15:27:07,760] INFO [Controller id=1] New broker startup callback for 3 (kafka.controller.KafkaController)
[2022-05-30 15:27:07,761] DEBUG [Controller id=1] Register BrokerModifications handler for List(3) (kafka.controller.KafkaController)
[2022-05-30 15:27:07,761] INFO [RequestSendThread controllerId=1] Controller 1 connected to localhost:9003 (id: 3 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2022-05-30 15:27:07,762] INFO [Controller id=1] Updated broker epochs cache: HashMap(1 -> 867, 2 -> 887, 3 -> 904) (kafka.controller.KafkaController)
[2022-05-30 15:27:07,821] INFO [ControllerEventThread controllerId=3] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-05-30 15:27:07,836] DEBUG [Controller id=3] Broker 1 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2022-05-30 15:27:34,837] INFO [Controller id=1] New topics: [Set(test32)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(test32,Some(wxyCaSyARIacQOIMrssChQ),Map(test32-0 -> ReplicaAssignment(replicas=3,1, addingReplicas=, removingReplicas=), test32-1 -> ReplicaAssignment(replicas=1,2, addingReplicas=, removingReplicas=), test32-2 -> ReplicaAssignment(replicas=2,3, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2022-05-30 15:27:34,839] INFO [Controller id=1] New partition creation callback for test32-0,test32-1,test32-2 (kafka.controller.KafkaController)
[2022-05-30 15:30:52,256] INFO [Controller id=1] New topics: [Set(__consumer_offsets)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(__consumer_offsets,Some(WH0Vq5PLS8OV5MKbRyNIuA),HashMap(__consumer_offsets-22 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=), __consumer_offsets-30 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-25 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=), __consumer_offsets-35 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-37 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=), __consumer_offsets-38 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-13 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=), __consumer_offsets-8 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-21 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-4 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=), __consumer_offsets-27 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-7 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=), __consumer_offsets-9 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-46 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=), __consumer_offsets-41 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-33 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-23 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-49 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=), __consumer_offsets-47 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-16 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=), __consumer_offsets-28 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=), __consumer_offsets-31 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=), __consumer_offsets-36 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-42 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-3 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-18 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-15 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-24 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-17 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-48 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-19 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=), __consumer_offsets-11 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-2 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-43 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=), __consumer_offsets-6 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-14 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-20 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-0 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-44 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-39 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-12 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-45 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-1 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=), __consumer_offsets-5 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-26 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-29 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-34 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=), __consumer_offsets-10 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=), __consumer_offsets-32 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-40 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2022-05-30 15:30:52,257] INFO [Controller id=1] New partition creation callback for __consumer_offsets-22,__consumer_offsets-30,__consumer_offsets-25,__consumer_offsets-35,__consumer_offsets-37,__consumer_offsets-38,__consumer_offsets-13,__consumer_offsets-8,__consumer_offsets-21,__consumer_offsets-4,__consumer_offsets-27,__consumer_offsets-7,__consumer_offsets-9,__consumer_offsets-46,__consumer_offsets-41,__consumer_offsets-33,__consumer_offsets-23,__consumer_offsets-49,__consumer_offsets-47,__consumer_offsets-16,__consumer_offsets-28,__consumer_offsets-31,__consumer_offsets-36,__consumer_offsets-42,__consumer_offsets-3,__consumer_offsets-18,__consumer_offsets-15,__consumer_offsets-24,__consumer_offsets-17,__consumer_offsets-48,__consumer_offsets-19,__consumer_offsets-11,__consumer_offsets-2,__consumer_offsets-43,__consumer_offsets-6,__consumer_offsets-14,__consumer_offsets-20,__consumer_offsets-0,__consumer_offsets-44,__consumer_offsets-39,__consumer_offsets-12,__consumer_offsets-45,__consumer_offsets-1,__consumer_offsets-5,__consumer_offsets-26,__consumer_offsets-29,__consumer_offsets-34,__consumer_offsets-10,__consumer_offsets-32,__consumer_offsets-40 (kafka.controller.KafkaController)
[2022-05-30 15:31:24,754] DEBUG [Controller id=1] There is no producerId block yet (Zk path version 0), creating the first block (kafka.controller.KafkaController)
[2022-05-30 15:31:24,759] INFO [Controller id=1] Acquired new producerId block ProducerIdsBlock(assignedBrokerId=3, firstProducerId=0, size=1000) by writing to Zk with path version 1 (kafka.controller.KafkaController)
[2022-05-30 15:32:05,092] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2022-05-30 15:32:05,093] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2022-05-30 15:32:05,097] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2022-05-30 15:32:05,098] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2022-05-30 15:32:05,098] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2022-05-30 15:32:05,098] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2022-05-30 15:32:05,098] DEBUG [Controller id=1] Topics not in preferred replica for broker 3 HashMap() (kafka.controller.KafkaController)
[2022-05-30 15:32:05,098] TRACE [Controller id=1] Leader imbalance ratio for broker 3 is 0.0 (kafka.controller.KafkaController)
[2022-05-30 15:35:05,609] DEBUG [Controller id=1] Read current producerId block ProducerIdsBlock(assignedBrokerId=3, firstProducerId=0, size=1000), Zk path version 1 (kafka.controller.KafkaController)
[2022-05-30 15:35:05,612] INFO [Controller id=1] Acquired new producerId block ProducerIdsBlock(assignedBrokerId=2, firstProducerId=1000, size=1000) by writing to Zk with path version 2 (kafka.controller.KafkaController)
[2022-05-30 15:37:05,113] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2022-05-30 15:37:05,113] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2022-05-30 15:37:05,116] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2022-05-30 15:37:05,116] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2022-05-30 15:37:05,116] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2022-05-30 15:37:05,116] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2022-05-30 15:37:05,116] DEBUG [Controller id=1] Topics not in preferred replica for broker 3 HashMap() (kafka.controller.KafkaController)
[2022-05-30 15:37:05,116] TRACE [Controller id=1] Leader imbalance ratio for broker 3 is 0.0 (kafka.controller.KafkaController)
[2022-05-30 15:42:05,139] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2022-05-30 15:42:05,144] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2022-05-30 15:42:05,162] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2022-05-30 15:42:05,164] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2022-05-30 15:42:05,165] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2022-05-30 15:42:05,165] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2022-05-30 15:42:05,165] DEBUG [Controller id=1] Topics not in preferred replica for broker 3 HashMap() (kafka.controller.KafkaController)
[2022-05-30 15:42:05,165] TRACE [Controller id=1] Leader imbalance ratio for broker 3 is 0.0 (kafka.controller.KafkaController)
[2022-05-30 15:47:05,178] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2022-05-30 15:47:05,179] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2022-05-30 15:47:05,181] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2022-05-30 15:47:05,181] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2022-05-30 15:47:05,181] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2022-05-30 15:47:05,181] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2022-05-30 15:47:05,182] DEBUG [Controller id=1] Topics not in preferred replica for broker 3 HashMap() (kafka.controller.KafkaController)
[2022-05-30 15:47:05,182] TRACE [Controller id=1] Leader imbalance ratio for broker 3 is 0.0 (kafka.controller.KafkaController)
[2022-05-30 15:52:05,195] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2022-05-30 15:52:05,196] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2022-05-30 15:52:05,198] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2022-05-30 15:52:05,198] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2022-05-30 15:52:05,198] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2022-05-30 15:52:05,198] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2022-05-30 15:52:05,199] DEBUG [Controller id=1] Topics not in preferred replica for broker 3 HashMap() (kafka.controller.KafkaController)
[2022-05-30 15:52:05,199] TRACE [Controller id=1] Leader imbalance ratio for broker 3 is 0.0 (kafka.controller.KafkaController)
[2022-05-30 15:57:05,212] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2022-05-30 15:57:05,213] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2022-05-30 15:57:05,216] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 HashMap() (kafka.controller.KafkaController)
[2022-05-30 15:57:05,216] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2022-05-30 15:57:05,216] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 HashMap() (kafka.controller.KafkaController)
[2022-05-30 15:57:05,216] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2022-05-30 15:57:05,216] DEBUG [Controller id=1] Topics not in preferred replica for broker 3 HashMap() (kafka.controller.KafkaController)
[2022-05-30 15:57:05,216] TRACE [Controller id=1] Leader imbalance ratio for broker 3 is 0.0 (kafka.controller.KafkaController)
